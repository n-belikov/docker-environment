source dummy
{
    type                = mysql
    sql_host            = mariadb-stb
    sql_user            = root
    sql_pass            = root
    sql_db              = stb_search
    sql_port            = 3306
    sql_sock            = /var/lib/mysql/mysql.sock
    mysql_connect_flags = 32
    sql_range_step      = 1000
    sql_query           = SELECT 1, 'a' AS a
    sql_field_string    = a
}

index parent_index
{
    path              = /opt/sphinx/index/dummy
    expand_keywords   = 1
    morphology        = stem_enru
    index_exact_words = 1
    min_prefix_len    = 3
    min_word_len      = 2
    charset_table     = 0..9, A..Z->a..z, a..z,\
                        U+C0->a, U+C1->a, U+C2->a, U+C3->a, U+C4->a, U+C5->a, U+C6->a,\
                        U+C7->c,U+E7->c, U+C8->e, U+C9->e, U+CA->e, U+CB->e, U+CC->i,\
                        U+CD->i, U+CE->i, U+CF->i, U+D0->d, U+D1->n, U+D2->o, U+D3->o,\
                        U+D4->o, U+D5->o, U+D6->o, U+D8->o, U+D9->u, U+DA->u, U+DB->u,\
                        U+DC->u, U+DD->y, U+DE->t, U+DF->s,\
                        U+E0->a, U+E1->a, U+E2->a, U+E3->a, U+E4->a, U+E5->a, U+E6->a,\
                        U+E7->c,U+E7->c, U+E8->e, U+E9->e, U+EA->e, U+EB->e, U+EC->i,\
                        U+ED->i, U+EE->i, U+EF->i, U+F0->d, U+F1->n, U+F2->o, U+F3->o,\
                        U+F4->o, U+F5->o, U+F6->o, U+F8->o, U+F9->u, U+FA->u, U+FB->u,\
                        U+FC->u, U+FD->y, U+FE->t, U+FF->s, U+0400->U+0435, U+0401->U+0435,\
                        U+0402->U+0452, U+0452, U+0403->U+0433, U+0404->U+0454, U+0454,\
                        U+0405->U+0455, U+0455, U+0406->U+0456, U+0407->U+0456, U+0457->U+0456,\
                        U+0456, U+0408..U+040B->U+0458..U+045B, U+0458..U+045B, U+040C->U+043A,\
                        U+0439->U+0438, U+040D->U+0438, U+040E->U+0443, U+040F->U+045F, U+045F, U+0450->U+0435,\
                        U+0451->U+0435, U+0453->U+0433, U+045C->U+043A, U+045D->U+0438, U+045E->U+0443,\
                        U+0460->U+0461, U+0461, U+0462->U+0463, U+0463, U+0464->U+0465, U+0465,\
                        U+0466->U+0467, U+0467, U+0468->U+0469, U+0469, U+046A->U+046B, U+046B,\
                        U+046C->U+046D, U+046D, U+046E->U+046F, U+046F, U+0470->U+0471, U+0471,\
                        U+0472->U+0473, U+0473, U+0474->U+0475, U+0476->U+0475, U+0477->U+0475,\
                        U+0475, U+0478->U+0479, U+0479, U+047A->U+047B, U+047B, U+047C->U+047D,\
                        U+047D, U+047E->U+047F, U+047F, U+0480->U+0481, U+0481, U+048A->U+0438,\
                        U+048B->U+0438, U+048C->U+044C, U+048D->U+044C, U+048E->U+0440, U+048F->U+0440,\
                        U+0490->U+0433, U+0491->U+0433, U+0490->U+0433, U+0491->U+0433, U+0492->U+0433,\
                        U+0493->U+0433, U+0494->U+0433, U+0495->U+0433, U+0496->U+0436, U+0497->U+0436,\
                        U+0498->U+0437, U+0499->U+0437, U+049A->U+043A, U+049B->U+043A, U+049C->U+043A,\
                        U+049D->U+043A, U+049E->U+043A, U+049F->U+043A, U+04A0->U+043A, U+04A1->U+043A,\
                        U+04A2->U+043D, U+04A3->U+043D, U+04A4->U+043D, U+04A5->U+043D, U+04A6->U+043F,\
                        U+04A7->U+043F, U+04A8->U+04A9, U+04A9, U+04AA->U+0441, U+04AB->U+0441, U+04AC->U+0442,\
                        U+04AD->U+0442, U+04AE->U+0443, U+04AF->U+0443, U+04B0->U+0443, U+04B1->U+0443, U+04B2->U+0445,\
                        U+04B3->U+0445, U+04B4->U+04B5, U+04B5, U+04B6->U+0447, U+04B7->U+0447, U+04B8->U+0447, U+04B9->U+0447,\
                        U+04BA->U+04BB, U+04BB, U+04BC->U+04BD, U+04BE->U+04BD, U+04BF->U+04BD, U+04BD, U+04C0->U+04CF, U+04CF,\
                        U+04C1->U+0436, U+04C2->U+0436, U+04C3->U+043A, U+04C4->U+043A, U+04C5->U+043B, U+04C6->U+043B,\
                        U+04C7->U+043D, U+04C8->U+043D, U+04C9->U+043D, U+04CA->U+043D, U+04CB->U+0447, U+04CC->U+0447,\
                        U+04CD->U+043C, U+04CE->U+043C, U+04D0->U+0430, U+04D1->U+0430, U+04D2->U+0430, U+04D3->U+0430,\
                        U+04D4->U+00E6, U+04D5->U+00E6, U+04D6->U+0435, U+04D7->U+0435, U+04D8->U+04D9, U+04DA->U+04D9,\
                        U+04DB->U+04D9, U+04D9, U+04DC->U+0436, U+04DD->U+0436, U+04DE->U+0437, U+04DF->U+0437,\
                        U+04E0->U+04E1, U+04E1, U+04E2->U+0438, U+04E3->U+0438, U+04E4->U+0438, U+04E5->U+0438,\
                        U+04E6->U+043E, U+04E7->U+043E, U+04E8->U+043E, U+04E9->U+043E, U+04EA->U+043E, U+04EB->U+043E,\
                        U+04EC->U+044D, U+04ED->U+044D, U+04EE->U+0443, U+04EF->U+0443, U+04F0->U+0443, U+04F1->U+0443,\
                        U+04F2->U+0443, U+04F3->U+0443, U+04F4->U+0447, U+04F5->U+0447, U+04F6->U+0433, U+04F7->U+0433,\
                        U+04F8->U+044B, U+04F9->U+044B, U+04FA->U+0433, U+04FB->U+0433, U+04FC->U+0445, U+04FD->U+0445,\
                        U+04FE->U+0445, U+04FF->U+0445, U+0410..U+0418->U+0430..U+0438, U+0419->U+0438, U+0430..U+0438,\
                        U+041A..U+042F->U+043A..U+044F, U+043A..U+044F,
    source            = dummy
}

source parent_source
{
    type                = mysql
    sql_host            = mariadb-stb
    sql_user            = root
    sql_pass            = root
    sql_db              = stb_search
    sql_port            = 3306
    sql_sock            = /var/lib/mysql/mysql.sock
    mysql_connect_flags = 32
}

source all_ek : parent_source
{
    sql_query_pre      = SET NAMES utf8
    sql_query_pre      = SET CHARACTER SET utf8
    sql_query_pre      = SET SESSION query_cache_type=OFF
    sql_field_string   = title
    sql_field_string   = title_orig
    sql_field_string   = status
    sql_field_string   = poster_url
    sql_field_string   = type
    sql_field_string   = round_type
    sql_field_string   = demension
    sql_field_string   = name
    sql_field_string   = name_orig
    sql_field_string   = photo_url
    sql_field_string   = description
    sql_attr_bool      = is_xxx
    sql_attr_uint      = year
    sql_attr_uint      = age_rating
    sql_attr_uint      = content_id
    sql_attr_uint      = is_hidden
    sql_attr_uint      = main_country_id
    sql_attr_uint      = moderated_vendor_id
    sql_attr_uint      = kinopoisk_id
    sql_attr_uint      = rates_count
    sql_attr_uint      = views_count
    sql_attr_uint      = main_genre_id
    sql_attr_uint      = total_count
    sql_attr_uint      = has_phone_release
    sql_attr_float     = kinopoisk_rating
    sql_attr_timestamp = updated_at
    sql_attr_timestamp = created_at
    sql_attr_timestamp = deleted_at
    sql_attr_timestamp = watchable_updated_at
    sql_attr_timestamp = air_date
    sql_attr_bool      = in_ogo
    sql_attr_bool      = wide_poster_preview_url
    sql_attr_bool      = wide_poster_back_url
    sql_attr_bool      = is_ott

    sql_query          = SELECT                                                                    \
                            c.id * 10 + 1                              AS search_all_id,           \
                            c.id                                       AS content_id,              \
                            c.title,                                                               \
                            IF(c.title_orig = c.title, '', title_orig) AS title_orig,              \
                            c.title                                    AS name,                    \
                            IF(c.title_orig = c.title, '', title_orig) AS name_orig,               \
                            c.age_rating,                                                          \
                            c.kinopoisk_rating,                                                    \
                            c.kinopoisk_id,                                                        \
                            c.poster_url,                                                          \
                            c.poster_url                               AS photo_url,               \
                            c.description,                                                         \
                            c.main_genre_id,                                                       \
                            UNIX_TIMESTAMP(c.deleted_at)               AS deleted_at,              \
                            YEAR(c.air_date)                           AS `year`,                  \
                            c.status,                                                              \
                            c.is_hidden,                                                           \
                            c.main_country_id,                                                     \
                            c.type,                                                                \
                            IF(c.type = 'SFilm', 'Film', c.type)       AS round_type,              \
                            c.is_xxx,                                                              \
                            c.type_3D                                  AS demension,               \
                            c.is_released,                                                         \
                            UNIX_TIMESTAMP(c.created_at)               AS created_at,              \
                            UNIX_TIMESTAMP(c.updated_at)               AS updated_at,              \
                            UNIX_TIMESTAMP(c.watchable_updated_at)     AS watchable_updated_at,    \
                            UNIX_TIMESTAMP(c.air_date)                 AS air_date,                \
                            s.rates_count,                                                         \
                            s.views_count,                                                         \
                            s.rates_count + s.views_count              AS total_count,             \
                            c.has_phone_release,                                                   \
                            IFNULL(c.moderated_vendor_id, 1000000)     AS moderated_vendor_id,     \
                            IF(c.wide_poster_preview_url is null, false, true)  AS wide_poster_preview_url, \
                            IF(c.wide_poster_back_url is null, false, true)     AS wide_poster_back_url,    \
                            c.vendor_ids & (1<<(0)) 	               AS in_ogo,                  \
                            c.advod_vendor_ids > 0   AS is_ott                     \
                        FROM stb_index.contents AS c                                              \
                            LEFT JOIN stb_search.content_statistic AS s ON (s.content_id = c.id)
}

index all_ek : parent_index
{
    source             = all_ek
    path = /opt/sphinx/index/all_ek
}

source film : all_ek
{
    sql_query_pre = SET NAMES utf8
    sql_query_pre = SET CHARACTER SET utf8
    sql_query_pre = SET SESSION query_cache_type=OFF

    sql_query     = SELECT                                                               \
                      c.id * 10 + 1                          AS search_all_id,           \
                      c.id                                   AS content_id,              \
                      c.title,                                                           \
                      c.title_orig,                                                      \
                      c.title                                AS name,                    \
                      c.title_orig                           AS name_orig,               \
                      c.age_rating,                                                      \
                      c.kinopoisk_rating,                                                \
                      c.kinopoisk_id,                                                    \
                      c.poster_url,                                                      \
                      c.poster_url                           AS photo_url,               \
                      c.description,                                                     \
                      c.main_genre_id,                                                   \
                      UNIX_TIMESTAMP(c.deleted_at)           AS deleted_at,              \
                      YEAR(c.air_date)                       AS `year`,                  \
                      c.status,                                                          \
                      c.is_hidden,                                                       \
                      c.main_country_id,                                                 \
                      c.type,                                                            \
                      c.is_xxx,                                                          \
                      c.type_3D                              AS demension,               \
                      c.is_released,                                                     \
                      UNIX_TIMESTAMP(c.created_at)           AS created_at,              \
                      UNIX_TIMESTAMP(c.updated_at)           AS updated_at,              \
                      UNIX_TIMESTAMP(c.watchable_updated_at) AS watchable_updated_at,    \
                      UNIX_TIMESTAMP(c.air_date)             AS air_date,                \
                      0                                      AS rates_count,             \
                      0                                      AS views_count,             \
                      0                                      AS total_count,             \
                      c.has_phone_release,                                               \
                      IFNULL(c.moderated_vendor_id, 1000000)      AS moderated_vendor_id \
                                                                                         \
                    FROM stb_index.contents c                                           \
                    WHERE c.id >= $start AND c.id <= $end                                \
                          AND c.type = 'Film'

    sql_query_range = SELECT                       \
                      MIN(contents.id),          \
                      MAX(contents.id)           \
                    FROM stb_index.contents     \
                    WHERE contents.type = 'Film'

    sql_query_pre = INSERT INTO stb_search.delta_index                             \
                                          (name, date)                                                  \
                                        VALUES                                                          \
                                          ('film', (SELECT MAX(contents.updated_at)                     \
                    FROM stb_index.contents                                                            \
                    WHERE contents.type = 'Film'))                                                      \
                                        ON DUPLICATE KEY UPDATE date = (SELECT MAX(contents.updated_at) \
                    FROM stb_index.contents                                                            \
                    WHERE contents.type = 'Film')
}
index film : parent_index
{
    source        = film
    path = /opt/sphinx/index/film
}
source film_delta : all_ek
{
    sql_query_pre = SET NAMES utf8
    sql_query_pre = SET CHARACTER SET utf8
    sql_query_pre = SET SESSION query_cache_type=OFF

    sql_query     = SELECT                                                               \
                      c.id * 10 + 1                          AS search_all_id,           \
                      c.id                                   AS content_id,              \
                      c.title,                                                           \
                      c.title_orig,                                                      \
                      c.title                                AS name,                    \
                      c.title_orig                           AS name_orig,               \
                      c.age_rating,                                                      \
                      c.kinopoisk_rating,                                                \
                      c.kinopoisk_id,                                                    \
                      c.poster_url,                                                      \
                      c.poster_url                           AS photo_url,               \
                      c.description,                                                     \
                      c.main_genre_id,                                                   \
                      UNIX_TIMESTAMP(c.deleted_at)           AS deleted_at,              \
                      YEAR(c.air_date)                       AS `year`,                  \
                      c.status,                                                          \
                      c.is_hidden,                                                       \
                      c.main_country_id,                                                 \
                      c.type,                                                            \
                      c.is_xxx,                                                          \
                      c.type_3D                              AS demension,               \
                      c.is_released,                                                     \
                      UNIX_TIMESTAMP(c.created_at)           AS created_at,              \
                      UNIX_TIMESTAMP(c.updated_at)           AS updated_at,              \
                      UNIX_TIMESTAMP(c.watchable_updated_at) AS watchable_updated_at,    \
                      UNIX_TIMESTAMP(c.air_date)             AS air_date,                \
                      0                                      AS rates_count,             \
                      0                                      AS views_count,             \
                      0                                      AS total_count,             \
                      c.has_phone_release,                                               \
                      IFNULL(c.moderated_vendor_id, 1000000)      AS moderated_vendor_id \
                                                                                         \
                    FROM stb_index.contents c                                           \
                    WHERE c.id >= $start AND c.id <= $end                                \
                          AND c.type = 'Film'                                            \
                          AND c.updated_at >= (SELECT stb_search.delta_index.date FROM stb_search.delta_index WHERE stb_search.delta_index.name = 'film')                                \
                          AND c.updated_at <= (SELECT stb_search.predelta_index.date FROM stb_search.predelta_index WHERE stb_search.predelta_index.name = 'film')

    sql_query_range = SELECT                       \
                      MIN(contents.id),          \
                      MAX(contents.id)           \
                    FROM stb_index.contents     \
                    WHERE contents.type = 'Film'

    sql_query_pre = INSERT INTO stb_search.predelta_index                          \
                                          (name, date)                                                  \
                                        VALUES ('film', (SELECT MAX(contents.updated_at)                \
                    FROM stb_index.contents                                                            \
                    WHERE contents.type = 'Film'))                                                      \
                                        ON DUPLICATE KEY UPDATE date = (SELECT MAX(contents.updated_at) \
                    FROM stb_index.contents                                                            \
                    WHERE contents.type = 'Film')

    sql_query_post = INSERT INTO stb_search.delta_index                              \
                                      (SELECT id, name, date                          \
                                      FROM stb_search.predelta_index                 \
                                      WHERE stb_search.predelta_index.name = 'film') \
                                    ON DUPLICATE KEY UPDATE date = (                  \
                                      SELECT                                          \
                                        date                                          \
                                      FROM stb_search.predelta_index                 \
                                      WHERE stb_search.predelta_index.name = 'film'  \
                                    )
}
index film_delta : parent_index
{
    source        = film_delta
    path = /opt/sphinx/index/film_delta
}

source tv_show : all_ek
{
    sql_query_pre = SET NAMES utf8
    sql_query_pre = SET CHARACTER SET utf8
    sql_query_pre = SET SESSION query_cache_type=OFF

    sql_query     = SELECT                                                               \
                      c.id * 10 + 1                          AS search_all_id,           \
                      c.id                                   AS content_id,              \
                      c.title,                                                           \
                      c.title_orig,                                                      \
                      c.title                                AS name,                    \
                      c.title_orig                           AS name_orig,               \
                      c.age_rating,                                                      \
                      c.kinopoisk_rating,                                                \
                      c.kinopoisk_id,                                                    \
                      c.poster_url,                                                      \
                      c.poster_url                           AS photo_url,               \
                      c.description,                                                     \
                      c.main_genre_id,                                                   \
                      UNIX_TIMESTAMP(c.deleted_at)           AS deleted_at,              \
                      YEAR(c.air_date)                       AS `year`,                  \
                      c.status,                                                          \
                      c.is_hidden,                                                       \
                      c.main_country_id,                                                 \
                      c.type,                                                            \
                      c.is_xxx,                                                          \
                      c.type_3D                              AS demension,               \
                      c.is_released,                                                     \
                      UNIX_TIMESTAMP(c.created_at)           AS created_at,              \
                      UNIX_TIMESTAMP(c.updated_at)           AS updated_at,              \
                      UNIX_TIMESTAMP(c.watchable_updated_at) AS watchable_updated_at,    \
                      UNIX_TIMESTAMP(c.air_date)             AS air_date,                \
                      0                                      AS rates_count,             \
                      0                                      AS views_count,             \
                      0                                      AS total_count,             \
                      c.has_phone_release,                                               \
                      IFNULL(c.moderated_vendor_id, 1000000)      AS moderated_vendor_id \
                    FROM stb_index.contents c                                           \
                    WHERE c.id >= $start AND c.id <= $end                                \
                          AND c.type = 'TVShow'

    sql_query_range = SELECT                         \
                      MIN(contents.id),            \
                      MAX(contents.id)             \
                    FROM stb_index.contents       \
                    WHERE contents.type = 'TVShow'

    sql_query_pre = INSERT INTO stb_search.delta_index                             \
                                          (name, date)                                                  \
                                        VALUES                                                          \
                                          ('tv_show', (SELECT MAX(contents.updated_at)                  \
                    FROM stb_index.contents                                                            \
                    WHERE contents.type = 'TVShow'))                                                    \
                                        ON DUPLICATE KEY UPDATE date = (SELECT MAX(contents.updated_at) \
                    FROM stb_index.contents                                                            \
                    WHERE contents.type = 'TVShow')
}
index tv_show : parent_index
{
    source        = tv_show
    path = /opt/sphinx/index/tv_show
}
source tv_show_delta : all_ek
{
    sql_query_pre = SET NAMES utf8
    sql_query_pre = SET CHARACTER SET utf8
    sql_query_pre = SET SESSION query_cache_type=OFF

    sql_query     = SELECT                                                               \
                      c.id * 10 + 1                          AS search_all_id,           \
                      c.id                                   AS content_id,              \
                      c.title,                                                           \
                      c.title_orig,                                                      \
                      c.title                                AS name,                    \
                      c.title_orig                           AS name_orig,               \
                      c.age_rating,                                                      \
                      c.kinopoisk_rating,                                                \
                      c.kinopoisk_id,                                                    \
                      c.poster_url,                                                      \
                      c.poster_url                           AS photo_url,               \
                      c.description,                                                     \
                      c.main_genre_id,                                                   \
                      UNIX_TIMESTAMP(c.deleted_at)           AS deleted_at,              \
                      YEAR(c.air_date)                       AS `year`,                  \
                      c.status,                                                          \
                      c.is_hidden,                                                       \
                      c.main_country_id,                                                 \
                      c.type,                                                            \
                      c.is_xxx,                                                          \
                      c.type_3D                              AS demension,               \
                      c.is_released,                                                     \
                      UNIX_TIMESTAMP(c.created_at)           AS created_at,              \
                      UNIX_TIMESTAMP(c.updated_at)           AS updated_at,              \
                      UNIX_TIMESTAMP(c.watchable_updated_at) AS watchable_updated_at,    \
                      UNIX_TIMESTAMP(c.air_date)             AS air_date,                \
                      0                                      AS rates_count,             \
                      0                                      AS views_count,             \
                      0                                      AS total_count,             \
                      c.has_phone_release,                                               \
                      IFNULL(c.moderated_vendor_id, 1000000)      AS moderated_vendor_id \
                    FROM stb_index.contents c                                           \
                    WHERE c.id >= $start AND c.id <= $end                                \
                          AND c.type = 'TVShow'                                          \
                          AND c.updated_at >= (SELECT stb_search.delta_index.date FROM stb_search.delta_index WHERE stb_search.delta_index.name = 'tv_show')                                \
                          AND c.updated_at <= (SELECT stb_search.predelta_index.date FROM stb_search.predelta_index WHERE stb_search.predelta_index.name = 'tv_show')

    sql_query_range = SELECT                         \
                      MIN(contents.id),            \
                      MAX(contents.id)             \
                    FROM stb_index.contents       \
                    WHERE contents.type = 'TVShow'

    sql_query_pre = INSERT INTO stb_search.predelta_index                          \
                                          (name, date)                                                  \
                                        VALUES ('tv_show', (SELECT MAX(contents.updated_at)             \
                    FROM stb_index.contents                                                            \
                    WHERE contents.type = 'TVShow'))                                                    \
                                        ON DUPLICATE KEY UPDATE date = (SELECT MAX(contents.updated_at) \
                    FROM stb_index.contents                                                            \
                    WHERE contents.type = 'TVShow')

    sql_query_post = INSERT INTO stb_search.delta_index                  \
                                      (SELECT id, name, date                             \
                                      FROM stb_search.predelta_index                    \
                                      WHERE stb_search.predelta_index.name = 'tv_show') \
                                    ON DUPLICATE KEY UPDATE date = (                     \
                                      SELECT                                             \
                                        date                                             \
                                      FROM stb_search.predelta_index                    \
                                      WHERE stb_search.predelta_index.name = 'tv_show'  \
                                    )
}
index tv_show_delta : parent_index
{
    source        = tv_show_delta
    path = /opt/sphinx/index/tv_show_delta
}

source user_content : parent_source
{
    sql_query_pre      = SET NAMES utf8
    sql_query_pre      = SET CHARACTER SET utf8
    sql_query_pre      = SET SESSION query_cache_type=OFF
    sql_attr_bigint    = rating
    sql_attr_uint      = profile_id
    sql_attr_uint      = content_id
    sql_attr_uint      = favorited
    sql_attr_uint      = year
    sql_attr_uint      = age_rating
    sql_attr_uint      = rates_count
    sql_attr_uint      = views_count
    sql_attr_uint      = has_phone_release
    sql_attr_float     = kinopoisk_rating
    sql_field_string   = title
    sql_field_string   = title_orig
    sql_field_string   = status
    sql_field_string   = main_genre_id
    sql_field_string   = poster_url
    sql_field_string   = type
    sql_field_string   = demension
    sql_attr_timestamp = updated_at
    sql_attr_timestamp = created_at
    sql_attr_timestamp = deleted_at
    sql_attr_timestamp = last_watch_at
    sql_attr_bool      = is_hidden
    sql_attr_bool      = is_xxx
    sql_attr_bool      = rating_is_null

    sql_query          = SELECT                                                               \
                           ucp.id,                                                            \
                           ucp.profile_id,                                                    \
                           ucp.rating,                                                        \
                           ucp.favorited,                                                     \
                           ucp.content_id,                                                    \
                           c.title,                                                           \
                           UNIX_TIMESTAMP(ucp.created_at)    AS created_at,                   \
                           UNIX_TIMESTAMP(ucp.updated_at)    AS updated_at,                   \
                           UNIX_TIMESTAMP(ucp.last_watch_at) AS last_watch_at,                \
                           if(ucp.rating IS NULL, true, false) AS rating_is_null,             \
                           c.title_orig,                                                      \
                           c.age_rating,                                                      \
                           c.kinopoisk_rating,                                                \
                           c.kinopoisk_id,                                                    \
                           c.poster_url,                                                      \
                           c.description,                                                     \
                           c.main_genre_id,                                                   \
                           UNIX_TIMESTAMP(c.deleted_at)      AS deleted_at,                   \
                           YEAR(c.air_date)                  AS `year`,                       \
                           c.status,                                                          \
                           c.is_hidden,                                                       \
                           c.main_country_id,                                                 \
                           c.type,                                                            \
                           c.is_xxx,                                                          \
                           c.type_3D                         AS demension,                    \
                           c.is_released,                                                     \
                           0                                      AS rates_count,             \
                           0                                      AS views_count,             \
                           c.has_phone_release,                                               \
                           IFNULL(c.moderated_vendor_id, 1000000)      AS moderated_vendor_id \
                         FROM stb_recommendations_content.user_content_properties ucp        \
                           LEFT JOIN stb_index.contents c ON (c.id = ucp.content_id)         \
                         WHERE ucp.id >= $start AND ucp.id <= $end

    sql_query_range    = SELECT                                                        \
                           MIN(ucp.id),                                                \
                           MAX(ucp.id)                                                 \
                         FROM stb_recommendations_content.user_content_properties ucp

    sql_query_pre      = INSERT INTO stb_search.delta_index                        \
                                               (name, date)                                             \
                                             VALUES                                                     \
                                               ('user_content', (SELECT MAX(ucp.updated_at)             \
                         FROM stb_recommendations_content.user_content_properties ucp))                \
                                             ON DUPLICATE KEY UPDATE date = (SELECT MAX(ucp.updated_at) \
                         FROM stb_recommendations_content.user_content_properties ucp)
}
index user_content : parent_index
{
    source             = user_content
    path = /opt/sphinx/index/user_content
}
source user_content_delta : parent_source
{
    sql_query_pre      = SET NAMES utf8
    sql_query_pre      = SET CHARACTER SET utf8
    sql_query_pre      = SET SESSION query_cache_type=OFF
    sql_attr_bigint    = rating
    sql_attr_uint      = profile_id
    sql_attr_uint      = content_id
    sql_attr_uint      = favorited
    sql_attr_uint      = year
    sql_attr_uint      = age_rating
    sql_attr_uint      = rates_count
    sql_attr_uint      = views_count
    sql_attr_uint      = has_phone_release
    sql_attr_float     = kinopoisk_rating
    sql_field_string   = title
    sql_field_string   = title_orig
    sql_field_string   = status
    sql_field_string   = main_genre_id
    sql_field_string   = poster_url
    sql_field_string   = type
    sql_field_string   = demension
    sql_attr_timestamp = updated_at
    sql_attr_timestamp = created_at
    sql_attr_timestamp = deleted_at
    sql_attr_timestamp = last_watch_at
    sql_attr_bool      = is_hidden
    sql_attr_bool      = is_xxx
    sql_attr_bool      = rating_is_null

    sql_query          = SELECT                                                               \
                           ucp.id,                                                            \
                           ucp.profile_id,                                                    \
                           ucp.rating,                                                        \
                           ucp.favorited,                                                     \
                           ucp.content_id,                                                    \
                           c.title,                                                           \
                           UNIX_TIMESTAMP(ucp.created_at)      AS created_at,                 \
                           UNIX_TIMESTAMP(ucp.updated_at)      AS updated_at,                 \
                           UNIX_TIMESTAMP(ucp.last_watch_at)   AS last_watch_at,              \
                           if(ucp.rating IS NULL, TRUE, FALSE) AS rating_is_null,             \
                           c.title_orig,                                                      \
                           c.age_rating,                                                      \
                           c.kinopoisk_rating,                                                \
                           c.kinopoisk_id,                                                    \
                           c.poster_url,                                                      \
                           c.description,                                                     \
                           c.main_genre_id,                                                   \
                           UNIX_TIMESTAMP(c.deleted_at)        AS deleted_at,                 \
                           YEAR(c.air_date)                    AS `year`,                     \
                           c.status,                                                          \
                           c.is_hidden,                                                       \
                           c.main_country_id,                                                 \
                           c.type,                                                            \
                           c.is_xxx,                                                          \
                           c.type_3D                           AS demension,                  \
                           c.is_released,                                                     \
                           0                                      AS rates_count,             \
                           0                                      AS views_count,             \
                           c.has_phone_release,                                               \
                           IFNULL(c.moderated_vendor_id, 1000000)      AS moderated_vendor_id \
                         FROM stb_recommendations_content.user_content_properties ucp        \
                           LEFT JOIN stb_index.contents c ON (c.id = ucp.content_id)         \
                         WHERE ucp.updated_at > (SELECT stb_search.delta_index.date FROM stb_search.delta_index WHERE stb_search.delta_index.name = 'user_content')                                   \
                               AND ucp.updated_at <= (SELECT stb_search.predelta_index.date FROM stb_search.predelta_index WHERE stb_search.predelta_index.name = 'user_content')                           \
                               AND ucp.id >= $start AND ucp.id <= $end

    sql_query_range    = SELECT                                                        \
                           MIN(ucp.id),                                                \
                           MAX(ucp.id)                                                 \
                         FROM stb_recommendations_content.user_content_properties ucp

    sql_query_pre      = INSERT INTO stb_search.predelta_index                     \
                                               (name, date)                                             \
                                             VALUES ('user_content', (SELECT MAX(ucp.updated_at)        \
                         FROM stb_recommendations_content.user_content_properties ucp))                \
                                             ON DUPLICATE KEY UPDATE date = (SELECT MAX(ucp.updated_at) \
                         FROM stb_recommendations_content.user_content_properties ucp)

    sql_query_post     = INSERT INTO stb_search.delta_index                       \
                                           (SELECT id, name, date                                  \
                                           FROM stb_search.predelta_index                         \
                                           WHERE stb_search.predelta_index.name = 'user_content') \
                                         ON DUPLICATE KEY UPDATE date = (                          \
                                           SELECT                                                  \
                                             date                                                  \
                                           FROM stb_search.predelta_index                         \
                                           WHERE stb_search.predelta_index.name = 'user_content'  \
                                         )
}
index user_content_delta : parent_index
{
    source             = user_content_delta
    path = /opt/sphinx/index/user_content_delta
}

source search_cast_fav : parent_source
{
    sql_query_pre    = SET NAMES utf8
    sql_query_pre    = SET CHARACTER SET utf8
    sql_query_pre    = SET SESSION query_cache_type=OFF
    sql_attr_uint    = profile_id
    sql_attr_uint    = person_id
    sql_field_string = name
    sql_field_string = name_orig
    sql_field_string = photo_url

    sql_query        = SELECT                                                                  \
                         upl.id,                                                               \
                         upl.profile_id,                                                       \
                         upl.person_id,                                                        \
                         stb_index.actors.name,                                               \
                         stb_index.actors.name_orig,                                          \
                         stb_index.actors.photo_url                                           \
                       FROM stb_recommendations_content.user_person_likes upl                 \
                         LEFT JOIN stb_index.actors ON (stb_index.actors.id = upl.person_id) \
                       WHERE upl.id >= $start AND upl.id <= $end

    sql_query_range  = SELECT                                              \
                         MIN(id),                                          \
                         MAX(id)                                           \
                       FROM stb_recommendations_content.user_person_likes

    sql_query_pre    = INSERT INTO stb_search.delta_index                        \
                                             (name, date)                                             \
                                           VALUES                                                     \
                                             ('search_cast_fav', (SELECT MAX(upl.updated_at)          \
                       FROM stb_recommendations_content.user_person_likes upl))                      \
                                           ON DUPLICATE KEY UPDATE date = (SELECT MAX(upl.updated_at) \
                       FROM stb_recommendations_content.user_person_likes upl)
}
index search_cast_fav : parent_index
{
    source           = search_cast_fav
    path = /opt/sphinx/index/search_cast_fav
}
source search_cast_fav_delta : parent_source
{
    sql_query_pre    = SET NAMES utf8
    sql_query_pre    = SET CHARACTER SET utf8
    sql_query_pre    = SET SESSION query_cache_type=OFF
    sql_attr_uint    = profile_id
    sql_attr_uint    = person_id
    sql_field_string = name
    sql_field_string = name_orig
    sql_field_string = photo_url

    sql_query        = SELECT                                                                  \
                         upl.id,                                                               \
                         upl.profile_id,                                                       \
                         upl.person_id,                                                        \
                         stb_index.actors.name,                                               \
                         stb_index.actors.name_orig,                                          \
                         stb_index.actors.photo_url                                           \
                       FROM stb_recommendations_content.user_person_likes upl                 \
                         LEFT JOIN stb_index.actors ON (stb_index.actors.id = upl.person_id) \
                       WHERE upl.updated_at >= (SELECT stb_search.delta_index.date FROM stb_search.delta_index WHERE stb_search.delta_index.name = 'search_cast_fav')                                     \
                             AND upl.updated_at <= (SELECT stb_search.predelta_index.date FROM stb_search.predelta_index WHERE stb_search.predelta_index.name = 'search_cast_fav')                              \
                             AND upl.id >= $start                                              \
                             AND upl.id <= $end

    sql_query_range  = SELECT                                              \
                         MIN(id),                                          \
                         MAX(id)                                           \
                       FROM stb_recommendations_content.user_person_likes

    sql_query_pre    = INSERT INTO stb_search.predelta_index                     \
                                             (name, date)                                             \
                                           VALUES ('search_cast_fav', (SELECT MAX(upl.updated_at)     \
                       FROM stb_recommendations_content.user_person_likes upl))                      \
                                           ON DUPLICATE KEY UPDATE date = (SELECT MAX(upl.updated_at) \
                       FROM stb_recommendations_content.user_person_likes upl)

    sql_query_post   = INSERT INTO stb_search.delta_index                          \
                                         (SELECT id, name, date                                     \
                                         FROM stb_search.predelta_index                            \
                                         WHERE stb_search.predelta_index.name = 'search_cast_fav') \
                                       ON DUPLICATE KEY UPDATE date = (                             \
                                         SELECT                                                     \
                                           date                                                     \
                                         FROM stb_search.predelta_index                            \
                                         WHERE stb_search.predelta_index.name = 'search_cast_fav'  \
                                       )
}
index search_cast_fav_delta : parent_index
{
    source           = search_cast_fav_delta
    path = /opt/sphinx/index/search_cast_fav_delta
}

source search_profile_sub : parent_source
{
    sql_query_pre    = SET NAMES utf8
    sql_query_pre    = SET CHARACTER SET utf8
    sql_query_pre    = SET SESSION query_cache_type=OFF
    sql_attr_uint    = profile_id
    sql_attr_uint    = other_profile_id
    sql_field_string = name
    sql_field_string = lastname
    sql_field_string = avatar_url

    sql_query        = SELECT                                         \
                         pf.id,                                       \
                         pf.profile_id,                               \
                         pf.other_profile_id,                         \
                         p.name,                                      \
                         p.lastname,                                  \
                         p.avatar_url                                 \
                       FROM stb_socialization.profile_friendships pf \
                         LEFT JOIN stb_identification.profiles p     \
                           ON (p.id = pf.profile_id)                  \
                       WHERE pf.id >= $start AND pf.id <= $end

    sql_query_range  = SELECT                                      \
                         MIN(id),                                  \
                         MAX(id)                                   \
                       FROM stb_socialization.profile_friendships

    sql_query_pre    = INSERT INTO stb_search.delta_index                                                           \
                                             (name, date)                                                                                \
                                           VALUES                                                                                        \
                                             ('search_profile_sub', (SELECT MAX(stb_socialization.profile_friendships.updated_at)       \
                       FROM stb_socialization.profile_friendships))                                                                     \
                                           ON DUPLICATE KEY UPDATE date = (SELECT MAX(stb_socialization.profile_friendships.updated_at) \
                       FROM stb_socialization.profile_friendships)
}
index search_profile_sub : parent_index
{
    source           = search_profile_sub
    path = /opt/sphinx/index/search_profile_sub
}
source search_profile_sub_delta : parent_source
{
    sql_query_pre    = SET NAMES utf8
    sql_query_pre    = SET CHARACTER SET utf8
    sql_query_pre    = SET SESSION query_cache_type=OFF
    sql_attr_uint    = profile_id
    sql_attr_uint    = other_profile_id
    sql_field_string = name
    sql_field_string = lastname
    sql_field_string = avatar_url

    sql_query        = SELECT                                         \
                         pf.id,                                       \
                         pf.profile_id,                               \
                         pf.other_profile_id,                         \
                         p.name,                                      \
                         p.lastname,                                  \
                         p.avatar_url                                 \
                       FROM stb_socialization.profile_friendships pf \
                         LEFT JOIN stb_identification.profiles p     \
                           ON p.id = pf.profile_id                    \
                       WHERE pf.updated_at >= (SELECT stb_search.delta_index.date FROM stb_search.delta_index WHERE stb_search.delta_index.name = 'search_profile_sub')             \
                             AND pf.updated_at <= (SELECT stb_search.predelta_index.date FROM stb_search.predelta_index WHERE stb_search.predelta_index.name = 'search_profile_sub')      \
                             AND pf.id >= $start AND pf.id <= $end

    sql_query_range  = SELECT                                      \
                         MIN(id),                                  \
                         MAX(id)                                   \
                       FROM stb_socialization.profile_friendships

    sql_query_pre    = INSERT INTO stb_search.predelta_index                                                        \
                                             (name, date)                                                                                \
                                           VALUES ('search_profile_sub', (SELECT MAX(stb_socialization.profile_friendships.updated_at)  \
                       FROM stb_socialization.profile_friendships))                                                                     \
                                           ON DUPLICATE KEY UPDATE date = (SELECT MAX(stb_socialization.profile_friendships.updated_at) \
                       FROM stb_socialization.profile_friendships)

    sql_query_post   = INSERT INTO stb_search.delta_index                             \
                                         (SELECT id, name, date                                        \
                                         FROM stb_search.predelta_index                               \
                                         WHERE stb_search.predelta_index.name = 'search_profile_sub') \
                                       ON DUPLICATE KEY UPDATE date = (                                \
                                         SELECT                                                        \
                                           date                                                        \
                                         FROM stb_search.predelta_index                               \
                                         WHERE stb_search.predelta_index.name = 'search_profile_sub'  \
                                       )
}
index search_profile_sub_delta : parent_index
{
    source           = search_profile_sub_delta
    path = /opt/sphinx/index/search_profile_sub_delta
}

source search_profile_my : parent_source
{
    sql_query_pre    = SET NAMES utf8
    sql_query_pre    = SET CHARACTER SET utf8
    sql_query_pre    = SET SESSION query_cache_type=OFF
    sql_attr_uint    = profile_id
    sql_attr_uint    = other_profile_id
    sql_field_string = name
    sql_field_string = lastname
    sql_field_string = avatar_url

    sql_query        = SELECT                                         \
                         pf.id,                                       \
                         pf.profile_id,                               \
                         pf.other_profile_id,                         \
                         p.name,                                      \
                         p.lastname,                                  \
                         p.avatar_url                                 \
                       FROM stb_socialization.profile_friendships pf \
                         LEFT JOIN stb_identification.profiles p     \
                           ON (p.id = pf.other_profile_id)            \
                       WHERE pf.id >= $start AND pf.id <= $end

    sql_query_range  = SELECT                                      \
                         MIN(id),                                  \
                         MAX(id)                                   \
                       FROM stb_socialization.profile_friendships

    sql_query_pre    = INSERT INTO stb_search.delta_index                                                           \
                                             (name, date)                                                                                \
                                           VALUES                                                                                        \
                                             ('search_profile_my', (SELECT MAX(stb_socialization.profile_friendships.updated_at)        \
                       FROM stb_socialization.profile_friendships))                                                                     \
                                           ON DUPLICATE KEY UPDATE date = (SELECT MAX(stb_socialization.profile_friendships.updated_at) \
                       FROM stb_socialization.profile_friendships)
}
index search_profile_my : parent_index
{
    source           = search_profile_my
    path = /opt/sphinx/index/search_profile_my
}
source search_profile_my_delta : parent_source
{
    sql_query_pre    = SET NAMES utf8
    sql_query_pre    = SET CHARACTER SET utf8
    sql_query_pre    = SET SESSION query_cache_type=OFF
    sql_attr_uint    = profile_id
    sql_attr_uint    = other_profile_id
    sql_field_string = name
    sql_field_string = lastname
    sql_field_string = avatar_url

    sql_query        = SELECT                                         \
                         pf.id,                                       \
                         pf.profile_id,                               \
                         pf.other_profile_id,                         \
                         p.name,                                      \
                         p.lastname,                                  \
                         p.avatar_url                                 \
                       FROM stb_socialization.profile_friendships pf \
                         LEFT JOIN stb_identification.profiles p     \
                           ON (p.id = pf.other_profile_id)            \
                       WHERE pf.updated_at >= (SELECT stb_search.delta_index.date FROM stb_search.delta_index WHERE stb_search.delta_index.name = 'search_profile_my')             \
                             AND pf.updated_at <= (SELECT stb_search.predelta_index.date FROM stb_search.predelta_index WHERE stb_search.predelta_index.name = 'search_profile_my')      \
                             AND pf.id >= $start AND pf.id <= $end

    sql_query_range  = SELECT                                      \
                         MIN(id),                                  \
                         MAX(id)                                   \
                       FROM stb_socialization.profile_friendships

    sql_query_pre    = INSERT INTO stb_search.predelta_index                                                        \
                                             (name, date)                                                                                \
                                           VALUES ('search_profile_my', (SELECT MAX(stb_socialization.profile_friendships.updated_at)   \
                       FROM stb_socialization.profile_friendships))                                                                     \
                                           ON DUPLICATE KEY UPDATE date = (SELECT MAX(stb_socialization.profile_friendships.updated_at) \
                       FROM stb_socialization.profile_friendships)

    sql_query_post   = INSERT INTO stb_search.delta_index                            \
                                         (SELECT id, name, date                                       \
                                         FROM stb_search.predelta_index                              \
                                         WHERE stb_search.predelta_index.name = 'search_profile_my') \
                                       ON DUPLICATE KEY UPDATE date = (                               \
                                         SELECT                                                       \
                                           date                                                       \
                                         FROM stb_search.predelta_index                              \
                                         WHERE stb_search.predelta_index.name = 'search_profile_my'  \
                                       )
}
index search_profile_my_delta : parent_index
{
    source           = search_profile_my_delta
    path = /opt/sphinx/index/search_profile_my_delta
}

source search_events : parent_source
{
    sql_query_pre      = SET NAMES utf8
    sql_query_pre      = SET CHARACTER SET utf8
    sql_query_pre      = SET SESSION query_cache_type=OFF
    sql_attr_uint      = profile_id
    sql_attr_uint      = content_id
    sql_attr_uint      = actor_id
    sql_attr_uint      = rating
    sql_attr_timestamp = created_at
    sql_field_string   = comment
    sql_field_string   = type
    sql_field_string   = title
    sql_field_string   = name

    sql_query          = SELECT                                                     \
                           e.id,                                                    \
                           e.profile_id,                                            \
                           e.comment,                                               \
                           e.type,                                                  \
                           UNIX_TIMESTAMP(e.created_at) AS created_at,              \
                           e.content_id,                                            \
                           a.name,                                                  \
                           c.title,                                                 \
                           e.rating,                                                \
                           e.actor_id                                               \
                         FROM stb_socialization.events e                           \
                           LEFT JOIN stb_index.contents c ON (c.id = e.content_id) \
                           LEFT JOIN stb_index.actors a ON (e.actor_id = a.id)     \
                         WHERE e.id >= $start AND e.id <= $end

    sql_query_range    = SELECT                         \
                           MIN(id),                     \
                           MAX(id)                      \
                         FROM stb_socialization.events

    sql_query_pre      = INSERT INTO stb_search.delta_index                                              \
                                               (name, date)                                                                   \
                                             VALUES                                                                           \
                                               ('search_events', (SELECT MAX(stb_socialization.events.updated_at)            \
                         FROM stb_socialization.events))                                                                     \
                                             ON DUPLICATE KEY UPDATE date = (SELECT MAX(stb_socialization.events.updated_at) \
                         FROM stb_socialization.events)
}
index search_events : parent_index
{
    source             = search_events
    path = /opt/sphinx/index/search_events
}
source search_events_delta : parent_source
{
    sql_query_pre      = SET NAMES utf8
    sql_query_pre      = SET CHARACTER SET utf8
    sql_query_pre      = SET SESSION query_cache_type=OFF
    sql_attr_uint      = profile_id
    sql_attr_uint      = content_id
    sql_attr_uint      = actor_id
    sql_attr_uint      = rating
    sql_attr_timestamp = created_at
    sql_field_string   = comment
    sql_field_string   = type
    sql_field_string   = title
    sql_field_string   = name

    sql_query          = SELECT                                                     \
                           e.id,                                                    \
                           e.profile_id,                                            \
                           e.comment,                                               \
                           e.type,                                                  \
                           UNIX_TIMESTAMP(e.created_at) AS created_at,              \
                           e.content_id,                                            \
                           a.name,                                                  \
                           c.title,                                                 \
                           e.rating,                                                \
                           e.actor_id                                               \
                         FROM stb_socialization.events e                           \
                           LEFT JOIN stb_index.contents c ON (c.id = e.content_id) \
                           LEFT JOIN stb_index.actors a ON (e.actor_id = a.id)     \
                         WHERE e.updated_at >= (SELECT stb_search.delta_index.date FROM stb_search.delta_index WHERE stb_search.delta_index.name = 'search_events')                          \
                               AND e.updated_at <= (SELECT stb_search.predelta_index.date FROM stb_search.predelta_index WHERE stb_search.predelta_index.name = 'search_events')                   \
                               AND e.id >= $start AND e.id <= $end

    sql_query_range    = SELECT                         \
                           MIN(id),                     \
                           MAX(id)                      \
                         FROM stb_socialization.events

    sql_query_pre      = INSERT INTO stb_search.predelta_index                                           \
                                               (name, date)                                                                   \
                                             VALUES ('search_events', (SELECT MAX(stb_socialization.events.updated_at)       \
                         FROM stb_socialization.events))                                                                     \
                                             ON DUPLICATE KEY UPDATE date = (SELECT MAX(stb_socialization.events.updated_at) \
                         FROM stb_socialization.events)

    sql_query_post     = INSERT INTO stb_search.delta_index                        \
                                           (SELECT id, name, date                                   \
                                           FROM stb_search.predelta_index                          \
                                           WHERE stb_search.predelta_index.name = 'search_events') \
                                         ON DUPLICATE KEY UPDATE date = (                           \
                                           SELECT                                                   \
                                             date                                                   \
                                           FROM stb_search.predelta_index                          \
                                           WHERE stb_search.predelta_index.name = 'search_events'  \
                                         )
}
index search_events_delta : parent_index
{
    source             = search_events_delta
    path = /opt/sphinx/index/search_events_delta
}

source search_actors : parent_source
{
    sql_query_pre    = SET NAMES utf8
    sql_query_pre    = SET CHARACTER SET utf8
    sql_query_pre    = SET SESSION query_cache_type=OFF
    sql_attr_uint    = actor_id
    sql_attr_uint    = rates_count
    sql_attr_uint    = views_count
    sql_attr_uint    = total_count
    sql_attr_uint    = has_phone_release
    sql_attr_uint    = moderated_vendor_id
    sql_field_string = name
    sql_field_string = name_orig
    sql_field_string = photo_url
    sql_field_string = description
    sql_field_string = type
    sql_field_string = demension

    sql_query        = SELECT                                                           \
                         a.id * 10 + 2                 AS search_all_id,                \
                         a.id                          AS actor_id,                     \
                         a.name,                                                        \
                         a.name_orig,                                                   \
                         a.photo_url,                                                   \
                         s.rates_count,                                                 \
                         s.views_count,                                                 \
                         ''                            AS type,                         \
                         ''                            AS demension,                    \
                         ''                            AS description,                  \
                         s.rates_count + s.views_count AS total_count,                  \
                         999                           AS has_phone_release,            \
                         999                           AS moderated_vendor_id           \
                       FROM stb_index.actors a                                         \
                         LEFT JOIN stb_search.actor_statistic s ON (s.actor_id = a.id) \
                       WHERE a.id >= $start AND a.id <= $end

    sql_query_range  = SELECT                 \
                         MIN(id),             \
                         MAX(id)              \
                       FROM stb_index.actors

    sql_query_pre    = INSERT INTO stb_search.delta_index                                      \
                                             (name, date)                                                           \
                                           VALUES                                                                   \
                                             ('search_actors', (SELECT MAX(stb_index.actors.updated_at)            \
                       FROM stb_index.actors))                                                                     \
                                           ON DUPLICATE KEY UPDATE date = (SELECT MAX(stb_index.actors.updated_at) \
                       FROM stb_index.actors)
}
index search_actors : parent_index
{
    source           = search_actors
    path = /opt/sphinx/index/search_actors
}
source search_actors_delta : parent_source
{
    sql_query_pre    = SET NAMES utf8
    sql_query_pre    = SET CHARACTER SET utf8
    sql_query_pre    = SET SESSION query_cache_type=OFF
    sql_attr_uint    = actor_id
    sql_attr_uint    = rates_count
    sql_attr_uint    = views_count
    sql_attr_uint    = total_count
    sql_attr_uint    = has_phone_release
    sql_attr_uint    = moderated_vendor_id
    sql_field_string = name
    sql_field_string = name_orig
    sql_field_string = photo_url
    sql_field_string = description
    sql_field_string = type
    sql_field_string = demension

    sql_query        = SELECT                                                           \
                         a.id * 10 + 2                 AS search_all_id,                \
                         a.id                          AS actor_id,                     \
                         a.name,                                                        \
                         a.name_orig,                                                   \
                         a.photo_url,                                                   \
                         s.rates_count,                                                 \
                         s.views_count,                                                 \
                         ''                            AS type,                         \
                         ''                            AS demension,                    \
                         ''                            AS description,                  \
                         s.rates_count + s.views_count AS total_count,                  \
                         999                           AS has_phone_release,            \
                         999                           AS  moderated_vendor_id          \
                                                                                        \
                       FROM stb_index.actors a                                         \
                         LEFT JOIN stb_search.actor_statistic s ON (s.actor_id = a.id) \
                       WHERE a.id >= $start AND a.id <= $end                            \
                             AND a.updated_at >= (SELECT stb_search.delta_index.date FROM stb_search.delta_index WHERE stb_search.delta_index.name = 'search_actors')                            \
                             AND a.updated_at <= (SELECT stb_search.predelta_index.date FROM stb_search.predelta_index WHERE stb_search.predelta_index.name = 'search_actors')

    sql_query_range  = SELECT                 \
                         MIN(id),             \
                         MAX(id)              \
                       FROM stb_index.actors

    sql_query_pre    = INSERT INTO stb_search.predelta_index                                   \
                                             (name, date)                                                           \
                                           VALUES ('search_actors', (SELECT MAX(stb_index.actors.updated_at)       \
                       FROM stb_index.actors))                                                                     \
                                           ON DUPLICATE KEY UPDATE date = (SELECT MAX(stb_index.actors.updated_at) \
                       FROM stb_index.actors)

    sql_query_post   = INSERT INTO stb_search.delta_index                        \
                                         (SELECT id, name, date                                   \
                                         FROM stb_search.predelta_index                          \
                                         WHERE stb_search.predelta_index.name = 'search_actors') \
                                       ON DUPLICATE KEY UPDATE date = (                           \
                                         SELECT                                                   \
                                           date                                                   \
                                         FROM stb_search.predelta_index                          \
                                         WHERE stb_search.predelta_index.name = 'search_actors'  \
                                       )
}
index search_actors_delta : parent_index
{
    source           = search_actors_delta
    path = /opt/sphinx/index/search_actors_delta
}

source genre_all : parent_source
{
    sql_query_pre      = SET NAMES utf8
    sql_query_pre      = SET CHARACTER SET utf8
    sql_query_pre      = SET SESSION query_cache_type=OFF
    sql_field_string   = title
    sql_field_string   = title_orig
    sql_field_string   = status
    sql_field_string   = main_genre_id
    sql_field_string   = poster_url
    sql_field_string   = type
    sql_field_string   = demension
    sql_attr_bool      = is_xxx
    sql_attr_uint      = moderated_vendor_id
    sql_attr_uint      = year
    sql_attr_uint      = age_rating
    sql_attr_uint      = content_id
    sql_attr_uint      = genre_id
    sql_attr_uint      = is_hidden
    sql_attr_uint      = main_country_id
    sql_attr_uint      = kinopoisk_id
    sql_attr_uint      = rates_count
    sql_attr_uint      = views_count
    sql_attr_uint      = has_phone_release
    sql_attr_float     = kinopoisk_rating
    sql_attr_timestamp = updated_at
    sql_attr_timestamp = created_at
    sql_attr_timestamp = deleted_at
    sql_attr_timestamp = watchable_updated_at
    sql_attr_timestamp = air_date

    sql_query          = SELECT                                                               \
                           cg.id,                                                             \
                           cg.content_id,                                                     \
                           cg.genre_id,                                                       \
                           c.title,                                                           \
                           c.title_orig,                                                      \
                           c.age_rating,                                                      \
                           c.kinopoisk_rating,                                                \
                           c.kinopoisk_id,                                                    \
                           c.poster_url,                                                      \
                           c.description,                                                     \
                           c.main_genre_id,                                                   \
                           UNIX_TIMESTAMP(c.deleted_at) AS deleted_at,                        \
                           YEAR(c.air_date)             AS `year`,                            \
                           c.status,                                                          \
                           c.is_hidden,                                                       \
                           c.main_country_id,                                                 \
                           c.is_xxx,                                                          \
                           c.type_3D                    AS demension,                         \
                           c.is_released,                                                     \
                           c.type,                                                            \
                           UNIX_TIMESTAMP(c.created_at) AS created_at,                        \
                           UNIX_TIMESTAMP(c.updated_at) AS updated_at,                        \
                           UNIX_TIMESTAMP(c.watchable_updated_at) AS watchable_updated_at,    \
                           UNIX_TIMESTAMP(c.air_date)   AS air_date,                          \
                           0                                      AS rates_count,             \
                           0                                      AS views_count,             \
                           c.has_phone_release,                                               \
                           IFNULL(c.moderated_vendor_id, 1000000)      AS moderated_vendor_id \
                                                                                              \
                         FROM stb_index.content_genres cg                                    \
                           LEFT JOIN stb_index.contents c ON (cg.content_id = c.id)          \
                         WHERE cg.id >= $start AND cg.id <= $end

    sql_query_range    = SELECT                         \
                           MIN(content_genres.id),      \
                           MAX(content_genres.id)       \
                         FROM stb_index.content_genres

    sql_query_pre      = INSERT INTO stb_search.delta_index                                              \
                                               (name, date)                                                                   \
                                             VALUES                                                                           \
                                               ('genre_all', (SELECT MAX(stb_index.content_genres.updated_at)                \
                         FROM stb_index.content_genres))                                                                     \
                                             ON DUPLICATE KEY UPDATE date = (SELECT MAX(stb_index.content_genres.updated_at) \
                         FROM stb_index.content_genres)
}
index genre_all : parent_index
{
    source             = genre_all
    path = /opt/sphinx/index/genre_all
}
source genre_all_delta : parent_source
{
    sql_query_pre      = SET NAMES utf8
    sql_query_pre      = SET CHARACTER SET utf8
    sql_query_pre      = SET SESSION query_cache_type=OFF
    sql_field_string   = title
    sql_field_string   = title_orig
    sql_field_string   = status
    sql_field_string   = main_genre_id
    sql_field_string   = poster_url
    sql_field_string   = type
    sql_field_string   = demension
    sql_attr_bool      = is_xxx
    sql_attr_uint      = moderated_vendor_id
    sql_attr_uint      = year
    sql_attr_uint      = age_rating
    sql_attr_uint      = content_id
    sql_attr_uint      = genre_id
    sql_attr_uint      = is_hidden
    sql_attr_uint      = main_country_id
    sql_attr_uint      = kinopoisk_id
    sql_attr_uint      = rates_count
    sql_attr_uint      = views_count
    sql_attr_uint      = has_phone_release
    sql_attr_float     = kinopoisk_rating
    sql_attr_timestamp = updated_at
    sql_attr_timestamp = created_at
    sql_attr_timestamp = deleted_at
    sql_attr_timestamp = watchable_updated_at
    sql_attr_timestamp = air_date

    sql_query          = SELECT                                                               \
                           cg.id,                                                             \
                           cg.content_id,                                                     \
                           cg.genre_id,                                                       \
                           c.title,                                                           \
                           c.title_orig,                                                      \
                           c.age_rating,                                                      \
                           c.kinopoisk_rating,                                                \
                           c.kinopoisk_id,                                                    \
                           c.poster_url,                                                      \
                           c.description,                                                     \
                           c.main_genre_id,                                                   \
                           UNIX_TIMESTAMP(c.deleted_at)           AS deleted_at,              \
                           YEAR(c.air_date)                       AS `year`,                  \
                           c.status,                                                          \
                           c.is_hidden,                                                       \
                           c.main_country_id,                                                 \
                           c.is_xxx,                                                          \
                           c.type_3D                              AS demension,               \
                           c.is_released,                                                     \
                           c.type,                                                            \
                           UNIX_TIMESTAMP(c.created_at)           AS created_at,              \
                           UNIX_TIMESTAMP(c.updated_at)           AS updated_at,              \
                           UNIX_TIMESTAMP(c.watchable_updated_at) AS watchable_updated_at,    \
                           UNIX_TIMESTAMP(c.air_date)             AS air_date,                \
                           0                                      AS rates_count,             \
                           0                                      AS views_count,             \
                           c.has_phone_release,                                               \
                           IFNULL(c.moderated_vendor_id, 1000000)      AS moderated_vendor_id \
                           FROM stb_index.content_genres cg                                  \
                           LEFT JOIN stb_index.contents c ON (cg.content_id = c.id)          \
                         WHERE cg.updated_at >= (SELECT stb_search.delta_index.date FROM stb_search.delta_index WHERE stb_search.delta_index.name = 'genre_all')                                   \
                               AND cg.updated_at <= (SELECT stb_search.predelta_index.date FROM stb_search.predelta_index WHERE stb_search.predelta_index.name = 'genre_all')                            \
                               AND cg.id >= $start AND cg.id <= $end

    sql_query_range    = SELECT                         \
                           MIN(content_genres.id),      \
                           MAX(content_genres.id)       \
                         FROM stb_index.content_genres

    sql_query_pre      = INSERT INTO stb_search.predelta_index                                           \
                                               (name, date)                                                                   \
                                             VALUES ('genre_all', (SELECT MAX(stb_index.content_genres.updated_at)           \
                         FROM stb_index.content_genres))                                                                     \
                                             ON DUPLICATE KEY UPDATE date = (SELECT MAX(stb_index.content_genres.updated_at) \
                         FROM stb_index.content_genres)

    sql_query_post     = INSERT INTO stb_search.delta_index                    \
                                           (SELECT id, name, date                               \
                                           FROM stb_search.predelta_index                      \
                                           WHERE stb_search.predelta_index.name = 'genre_all') \
                                         ON DUPLICATE KEY UPDATE date = (                       \
                                           SELECT                                               \
                                             date                                               \
                                           FROM stb_search.predelta_index                      \
                                           WHERE stb_search.predelta_index.name = 'genre_all'  \
                                         )
}
index genre_all_delta : parent_index
{
    source             = genre_all_delta
    path = /opt/sphinx/index/genre_all_delta
}

source genre_film : genre_all
{
    sql_query_pre = SET NAMES utf8
    sql_query_pre = SET CHARACTER SET utf8
    sql_query_pre = SET SESSION query_cache_type=OFF

    sql_query     = SELECT                                                               \
                      cg.id,                                                             \
                      cg.content_id,                                                     \
                      cg.genre_id,                                                       \
                      c.title,                                                           \
                      c.title_orig,                                                      \
                      c.age_rating,                                                      \
                      c.kinopoisk_rating,                                                \
                      c.kinopoisk_id,                                                    \
                      c.poster_url,                                                      \
                      c.description,                                                     \
                      c.main_genre_id,                                                   \
                      UNIX_TIMESTAMP(c.deleted_at) AS deleted_at,                        \
                      YEAR(c.air_date)             AS `year`,                            \
                      c.status,                                                          \
                      c.is_hidden,                                                       \
                      c.main_country_id,                                                 \
                      c.is_xxx,                                                          \
                      c.type_3D                    AS demension,                         \
                      c.is_released,                                                     \
                      c.type,                                                            \
                      UNIX_TIMESTAMP(c.created_at) AS created_at,                        \
                      UNIX_TIMESTAMP(c.updated_at) AS updated_at,                        \
                      UNIX_TIMESTAMP(c.watchable_updated_at) AS watchable_updated_at,    \
                      UNIX_TIMESTAMP(c.air_date)   AS air_date,                          \
                      0                                      AS rates_count,             \
                      0                                      AS views_count,             \
                      c.has_phone_release,                                               \
                      IFNULL(c.moderated_vendor_id, 1000000)      AS moderated_vendor_id \
                    FROM stb_index.content_genres cg                                    \
                      LEFT JOIN stb_index.contents c ON (cg.content_id = c.id)          \
                    WHERE cg.id >= $start AND cg.id <= $end AND c.type = 'Film'

    sql_query_range = SELECT                            \
                      MIN(cg.id),                     \
                      MAX(cg.id)                      \
                    FROM stb_index.content_genres cg

    sql_query_pre = INSERT INTO stb_search.delta_index                                              \
                                          (name, date)                                                                   \
                                        VALUES                                                                           \
                                          ('genre_film', (SELECT MAX(stb_index.content_genres.updated_at)               \
                    FROM stb_index.content_genres))                                                                     \
                                        ON DUPLICATE KEY UPDATE date = (SELECT MAX(stb_index.content_genres.updated_at) \
                    FROM stb_index.content_genres)
}
index genre_film : parent_index
{
    source        = genre_film
    path = /opt/sphinx/index/genre_film
}
source genre_film_delta : genre_all
{
    sql_query_pre = SET NAMES utf8
    sql_query_pre = SET CHARACTER SET utf8
    sql_query_pre = SET SESSION query_cache_type=OFF

    sql_query     = SELECT                                                               \
                      cg.id,                                                             \
                      cg.content_id,                                                     \
                      cg.genre_id,                                                       \
                      c.title,                                                           \
                      c.title_orig,                                                      \
                      c.age_rating,                                                      \
                      c.kinopoisk_rating,                                                \
                      c.kinopoisk_id,                                                    \
                      c.poster_url,                                                      \
                      c.description,                                                     \
                      c.main_genre_id,                                                   \
                      UNIX_TIMESTAMP(c.deleted_at)           AS deleted_at,              \
                      YEAR(c.air_date)                       AS `year`,                  \
                      c.status,                                                          \
                      c.is_hidden,                                                       \
                      c.main_country_id,                                                 \
                      c.is_xxx,                                                          \
                      c.type_3D                              AS demension,               \
                      c.is_released,                                                     \
                      c.type,                                                            \
                      UNIX_TIMESTAMP(c.created_at)           AS created_at,              \
                      UNIX_TIMESTAMP(c.updated_at)           AS updated_at,              \
                      UNIX_TIMESTAMP(c.watchable_updated_at) AS watchable_updated_at,    \
                      UNIX_TIMESTAMP(c.air_date)             AS air_date,                \
                      0                                      AS rates_count,             \
                      0                                      AS views_count,             \
                      c.has_phone_release,                                               \
                      IFNULL(c.moderated_vendor_id, 1000000)      AS moderated_vendor_id \
                    FROM stb_index.content_genres cg                                    \
                      LEFT JOIN stb_index.contents c ON (cg.content_id = c.id)          \
                    WHERE cg.updated_at >= (SELECT stb_search.delta_index.date FROM stb_search.delta_index WHERE stb_search.delta_index.name = 'genre_film')                                   \
                          AND cg.updated_at <= (SELECT stb_search.predelta_index.date FROM stb_search.predelta_index WHERE stb_search.predelta_index.name = 'genre_film')                            \
                          AND cg.id >= $start AND cg.id <= $end AND c.type = 'Film'

    sql_query_range = SELECT                            \
                      MIN(cg.id),                     \
                      MAX(cg.id)                      \
                    FROM stb_index.content_genres cg

    sql_query_pre = INSERT INTO stb_search.predelta_index                                           \
                                          (name, date)                                                                   \
                                        VALUES ('genre_film', (SELECT MAX(stb_index.content_genres.updated_at)          \
                    FROM stb_index.content_genres))                                                                     \
                                        ON DUPLICATE KEY UPDATE date = (SELECT MAX(stb_index.content_genres.updated_at) \
                    FROM stb_index.content_genres)

    sql_query_post = INSERT INTO stb_search.delta_index                     \
                                      (SELECT id, name, date                                \
                                      FROM stb_search.predelta_index                       \
                                      WHERE stb_search.predelta_index.name = 'genre_film') \
                                    ON DUPLICATE KEY UPDATE date = (                        \
                                      SELECT                                                \
                                        date                                                \
                                      FROM stb_search.predelta_index                       \
                                      WHERE stb_search.predelta_index.name = 'genre_film'  \
                                    )
}
index genre_film_delta : parent_index
{
    source        = genre_film_delta
    path = /opt/sphinx/index/genre_film_delta
}

source genre_tv_show : genre_all
{
    sql_query_pre = SET NAMES utf8
    sql_query_pre = SET CHARACTER SET utf8
    sql_query_pre = SET SESSION query_cache_type=OFF

    sql_query     = SELECT                                                               \
                      cg.id,                                                             \
                      cg.content_id,                                                     \
                      cg.genre_id,                                                       \
                      c.title,                                                           \
                      c.title_orig,                                                      \
                      c.age_rating,                                                      \
                      c.kinopoisk_rating,                                                \
                      c.kinopoisk_id,                                                    \
                      c.poster_url,                                                      \
                      c.description,                                                     \
                      c.main_genre_id,                                                   \
                      UNIX_TIMESTAMP(c.deleted_at) AS deleted_at,                        \
                      YEAR(c.air_date)             AS `year`,                            \
                      c.status,                                                          \
                      c.is_hidden,                                                       \
                      c.main_country_id,                                                 \
                      c.is_xxx,                                                          \
                      c.type_3D                    AS demension,                         \
                      c.is_released,                                                     \
                      c.type,                                                            \
                      UNIX_TIMESTAMP(c.created_at) AS created_at,                        \
                      UNIX_TIMESTAMP(c.updated_at) AS updated_at,                        \
                      UNIX_TIMESTAMP(c.watchable_updated_at) AS watchable_updated_at,    \
                      UNIX_TIMESTAMP(c.air_date)   AS air_date,                          \
                      0                                      AS rates_count,             \
                      0                                      AS views_count,             \
                      c.has_phone_release,                                               \
                      IFNULL(c.moderated_vendor_id, 1000000)      AS moderated_vendor_id \
                    FROM stb_index.content_genres cg                                    \
                      LEFT JOIN stb_index.contents c ON (cg.content_id = c.id)          \
                    WHERE cg.id >= $start AND cg.id <= $end AND c.type = 'TVShow'

    sql_query_range = SELECT                            \
                      MIN(cg.id),                     \
                      MAX(cg.id)                      \
                    FROM stb_index.content_genres cg

    sql_query_pre = INSERT INTO stb_search.delta_index                       \
                                          (name, date)                                            \
                                        VALUES                                                    \
                                          ('genre_tv_show', (SELECT MAX(cg.updated_at)            \
                    FROM stb_index.content_genres cg))                                           \
                                        ON DUPLICATE KEY UPDATE date = (SELECT MAX(cg.updated_at) \
                    FROM stb_index.content_genres cg)
}
index genre_tv_show : parent_index
{
    source        = genre_tv_show
    path = /opt/sphinx/index/genre_tv_show
}
source genre_tv_show_delta : genre_all
{
    sql_query_pre = SET NAMES utf8
    sql_query_pre = SET CHARACTER SET utf8
    sql_query_pre = SET SESSION query_cache_type=OFF

    sql_query     = SELECT                                                               \
                      cg.id,                                                             \
                      cg.content_id,                                                     \
                      cg.genre_id,                                                       \
                      c.title,                                                           \
                      c.title_orig,                                                      \
                      c.age_rating,                                                      \
                      c.kinopoisk_rating,                                                \
                      c.kinopoisk_id,                                                    \
                      c.poster_url,                                                      \
                      c.description,                                                     \
                      c.main_genre_id,                                                   \
                      UNIX_TIMESTAMP(c.deleted_at)           AS deleted_at,              \
                      YEAR(c.air_date)                       AS `year`,                  \
                      c.status,                                                          \
                      c.is_hidden,                                                       \
                      c.main_country_id,                                                 \
                      c.is_xxx,                                                          \
                      c.type_3D                              AS demension,               \
                      c.is_released,                                                     \
                      c.type,                                                            \
                      UNIX_TIMESTAMP(c.created_at)           AS created_at,              \
                      UNIX_TIMESTAMP(c.updated_at)           AS updated_at,              \
                      UNIX_TIMESTAMP(c.watchable_updated_at) AS watchable_updated_at,    \
                      UNIX_TIMESTAMP(c.air_date)             AS air_date,                \
                      0                                      AS rates_count,             \
                      0                                      AS views_count,             \
                      c.has_phone_release,                                               \
                      IFNULL(c.moderated_vendor_id, 1000000)      AS moderated_vendor_id \
                    FROM stb_index.content_genres cg                                    \
                      LEFT JOIN stb_index.contents c ON (cg.content_id = c.id)          \
                    WHERE cg.updated_at >= (SELECT stb_search.delta_index.date FROM stb_search.delta_index WHERE stb_search.delta_index.name = 'genre_tv_show')                                   \
                          AND cg.updated_at <= (SELECT stb_search.predelta_index.date FROM stb_search.predelta_index WHERE stb_search.predelta_index.name = 'genre_tv_show')                            \
                          AND cg.id >= $start AND cg.id <= $end AND c.type = 'TVShow'

    sql_query_range = SELECT                            \
                      MIN(cg.id),                     \
                      MAX(cg.id)                      \
                    FROM stb_index.content_genres cg

    sql_query_pre = INSERT INTO stb_search.predelta_index                    \
                                          (name, date)                                            \
                                        VALUES ('genre_tv_show', (SELECT MAX(cg.updated_at)       \
                    FROM stb_index.content_genres cg))                                           \
                                        ON DUPLICATE KEY UPDATE date = (SELECT MAX(cg.updated_at) \
                    FROM stb_index.content_genres cg)

    sql_query_post = INSERT INTO stb_search.delta_index                        \
                                      (SELECT id, name, date                                   \
                                      FROM stb_search.predelta_index                          \
                                      WHERE stb_search.predelta_index.name = 'genre_tv_show') \
                                    ON DUPLICATE KEY UPDATE date = (                           \
                                      SELECT                                                   \
                                        date                                                   \
                                      FROM stb_search.predelta_index                          \
                                      WHERE stb_search.predelta_index.name = 'genre_tv_show'  \
                                    )
}
index genre_tv_show_delta : parent_index
{
    source        = genre_tv_show_delta
    path = /opt/sphinx/index/genre_tv_show_delta
}

source genre_name : parent_source
{
    sql_query_pre    = SET NAMES utf8
    sql_query_pre    = SET CHARACTER SET utf8
    sql_query_pre    = SET SESSION query_cache_type=OFF
    sql_attr_uint    = genre_id
    sql_field_string = name

    sql_query        = SELECT                                \
                         g.id,                               \
                         g.id AS genre_id,                   \
                         g.name                              \
                       FROM stb_index.genres g              \
                       WHERE g.id >= $start AND g.id <= $end

    sql_query_range  = SELECT                   \
                         MIN(g.id),             \
                         MAX(g.id)              \
                       FROM stb_index.genres g

    sql_query_pre    = INSERT INTO stb_search.delta_index                                      \
                                             (name, date)                                                           \
                                           VALUES                                                                   \
                                             ('genre_name', (SELECT MAX(stb_index.genres.updated_at)               \
                       FROM stb_index.genres))                                                                     \
                                           ON DUPLICATE KEY UPDATE date = (SELECT MAX(stb_index.genres.updated_at) \
                       FROM stb_index.genres)
}
index genre_name : parent_index
{
    source           = genre_name
    path = /opt/sphinx/index/genre_name
}
source genre_name_delta : parent_source
{
    sql_query_pre    = SET NAMES utf8
    sql_query_pre    = SET CHARACTER SET utf8
    sql_query_pre    = SET SESSION query_cache_type=OFF
    sql_attr_uint    = genre_id
    sql_field_string = name

    sql_query        = SELECT                                    \
                         g.id,                                   \
                         g.id AS genre_id,                       \
                         g.name                                  \
                       FROM stb_index.genres g                  \
                       WHERE g.updated_at >= (SELECT stb_search.delta_index.date FROM stb_search.delta_index WHERE stb_search.delta_index.name = 'genre_name')         \
                             AND g.updated_at <= (SELECT stb_search.predelta_index.date FROM stb_search.predelta_index WHERE stb_search.predelta_index.name = 'genre_name')  \
                             AND g.id >= $start AND g.id <= $end

    sql_query_range  = SELECT                   \
                         MIN(g.id),             \
                         MAX(g.id)              \
                       FROM stb_index.genres g

    sql_query_pre    = INSERT INTO stb_search.predelta_index                                   \
                                             (name, date)                                                           \
                                           VALUES ('genre_name', (SELECT MAX(stb_index.genres.updated_at)          \
                       FROM stb_index.genres))                                                                     \
                                           ON DUPLICATE KEY UPDATE date = (SELECT MAX(stb_index.genres.updated_at) \
                       FROM stb_index.genres)

    sql_query_post   = INSERT INTO stb_search.delta_index                     \
                                         (SELECT id, name, date                                \
                                         FROM stb_search.predelta_index                       \
                                         WHERE stb_search.predelta_index.name = 'genre_name') \
                                       ON DUPLICATE KEY UPDATE date = (                        \
                                         SELECT                                                \
                                           date                                                \
                                         FROM stb_search.predelta_index                       \
                                         WHERE stb_search.predelta_index.name = 'genre_name'  \
                                       )
}
index genre_name_delta : parent_index
{
    source           = genre_name_delta
    path = /opt/sphinx/index/genre_name_delta
}

source tv_channels : parent_source
{
    sql_query_pre    = SET NAMES utf8
    sql_query_pre    = SET CHARACTER SET utf8
    sql_query_pre    = SET SESSION query_cache_type=OFF
    sql_field_string = name
    sql_field_string = title
    sql_field_string = icon_url
    sql_field_string = photo_url
    sql_field_string = name_orig
    sql_field_string = type
    sql_field_string = demension
    sql_field_string = description
    sql_attr_uint    = channel_id
    sql_attr_uint    = bolshoe_is_hd
    sql_attr_uint    = bolshoe_stream_id
    sql_attr_uint    = is_archived
    sql_attr_uint    = archive_depth
    sql_attr_uint    = billing_city_id
    sql_attr_uint    = bolshoe_order
    sql_attr_uint    = has_phone_release
    sql_attr_uint    = available_for_not_goodline
    sql_attr_uint    = is_federal
    sql_attr_uint    = moderated_vendor_id
    sql_attr_uint    = is_hidden
    sql_attr_uint    = deleted_at
    sql_attr_bool    = in_ogo
    sql_attr_bool    = wide_poster_preview_url
    sql_attr_bool    = wide_poster_back_url
    sql_attr_bool    = is_4k
    sql_attr_bool    = is_ott

    sql_query        = SELECT                                                  \
                         ch.id * 10 + 3                 AS search_all_id,      \
                         ch.id                          AS channel_id,         \
                         ch.bolshoe_stream_id,                                 \
                         ch.icon_url,                                          \
                         ch.icon_url                    AS photo_url,          \
                         ch.bolshoe_is_hd,                                     \
                         ch.name,                                              \
                         ch.name 			AS title,	       \
                         ''                             AS name_orig,          \
                         ch.is_archived,                                       \
                         ch.archive_depth,                                     \
                         ch.billing_city_id,                                   \
                         ch.available_for_not_goodline,                        \
                         ch.is_federal,                                        \
                         ch.bolshoe_order,                                     \
                         UNIX_TIMESTAMP(ch.updated_at)  AS updated_at,         \
                         ''                             AS type,               \
                         ''                             AS demension,          \
                         ch.description,                                       \
                         999                            AS has_phone_release,  \
                         999                            AS moderated_vendor_id, \
                         0                              AS is_hidden,          \
                         0                              AS deleted_at,         \
			             1				                AS in_ogo,	           \
                         true				            AS wide_poster_preview_url, \
                         true				            AS wide_poster_back_url,    \
                         IF(ch.quality_name = '4K', 1, 0) AS is_4k,             \
                         ch.available_for_kuzbass       AS is_ott              \
                       FROM stb_index.tv_channels AS ch                       \
                       WHERE ch.is_xxx = FALSE                                 \
                             AND ch.available_on_bolshoe = TRUE                \
                             AND ch.is_technological = FALSE                   \
                             AND ch.billing_city_id = 1                        \
                             AND ch.is_our != 1
}

index tv_channels : parent_index
{
    source           = tv_channels
    path = /opt/sphinx/index/tv_channels
}

source ab_source_actors : parent_source
{
    sql_query_pre    = SET NAMES utf8
    sql_query_pre    = SET CHARACTER SET utf8
    sql_query_pre    = SET SESSION query_cache_type = OFF
    sql_attr_uint    = actor_id
    sql_attr_uint    = has_phone_release
    sql_attr_uint    = moderated_vendor_id
    sql_attr_uint    = rates_count
    sql_attr_uint    = views_count
    sql_attr_uint    = total_count
    sql_attr_uint    = is_hidden
    sql_attr_uint    = deleted_at
    sql_attr_bool    = in_ogo
    sql_attr_bool    = is_avod
    sql_attr_bool    = is_ott
    sql_field_string = name
    sql_field_string = title
    sql_field_string = name_orig
    sql_field_string = photo_url
    sql_field_string = description
    sql_field_string = type
    sql_field_string = demension
    sql_attr_bool    = wide_poster_preview_url
    sql_attr_bool    = wide_poster_back_url

sql_query        = SELECT                                           													\
                           a.id * 10 + 2               	        AS search_all_id,           							\
                           a.id                        	        AS actor_id,                      						\
                           a.name,                                                         								\
                           a.name 							    AS title,                                               \
                           a.name_orig,                                                    								\
                           a.photo_url,                                                    								\
                           'actor'                     	        AS type,                          						\
                           ''                          	        AS demension,                     						\
                           ''                          	        AS description,                   						\
                           999                         	        AS has_phone_release,             						\
                           999                         	        AS moderated_vendor_id,           						\
                           s.rates_count,                                                  								\
                           s.views_count,                                                  								\
                           s.rates_count + s.views_count 	    AS total_count,                   						\
                           0 								    AS is_hidden,                                           \
                           0 								    AS deleted_at,                                          \
                           true 							    AS wide_poster_preview_url,                            	\
                           true 							    AS wide_poster_back_url,                                \
                           IF(ca_ogo.id is null, false, true)   AS in_ogo,                                              \
                           IF(ca_avod.id is null, false, true)  AS is_avod,                                             \
                           IF(ca_ott.id is null, false, true)   AS is_ott                                               \
                       FROM stb_index.actors a                                            								\
                       LEFT JOIN stb_search.actor_statistic s ON (s.actor_id = a.id)  									\
                   	LEFT JOIN stb_index.content_actors ca_ogo ON ca_ogo.actor_id = a.id AND ca_ogo.content_id = (		\
                   		SELECT c.id FROM stb_index.contents c															\
                   			JOIN stb_index.content_actors ca2 ON ca2.content_id = c.id									\
                   			WHERE ca2.actor_id = a.id																	\
                   				AND (c.vendor_ids & 1) > 0																\
                   				AND ca2.role_type_id IN (1, 2)															\
                   			LIMIT 1																						\
                   	)																									\
                   	LEFT JOIN stb_index.content_actors ca_avod ON ca_avod.actor_id = a.id AND ca_avod.content_id = (	\
                   		SELECT c2.id FROM stb_index.contents c2														\
                   			JOIN stb_index.content_actors ca3 ON ca3.content_id = c2.id								\
                   			JOIN stb_index.releases r ON r.content_id = c2.id											\
                   			WHERE ca3.actor_id = a.id																	\
                   				AND r.vendor_id = 3																		\
                   				AND r.vendor_tariff_id = 1																\
                   				AND ca3.role_type_id IN (1, 2)															\
                   			LIMIT 1																						\
                   	)																									\
                    LEFT JOIN stb_index.content_actors ca_ott ON ca_ott.actor_id = a.id AND ca_ott.content_id = (	    \
                   		SELECT c.id FROM stb_index.contents c                                                          \
                   			JOIN stb_index.content_actors ca4 ON ca4.content_id = c.id                                 \
                   			WHERE ca4.actor_id = a.id																	\
								AND c.advod_vendor_ids > 0      											\
                   			LIMIT 1																						\
                   	)
}

source ab_recblocks : parent_source
{
    sql_query_pre    = SET NAMES utf8
    sql_query_pre    = SET CHARACTER SET utf8
    sql_query_pre    = SET SESSION query_cache_type = OFF
    sql_attr_uint    = module_id
    sql_field_string = title
    sql_field_string = name
    sql_attr_string  = type
    sql_attr_uint    = is_hidden
    sql_attr_uint    = deleted_at
    sql_attr_bool    = in_ogo
    sql_attr_bool    = wide_poster_preview_url
    sql_attr_bool    = wide_poster_back_url
    sql_attr_bool    = is_ott

	sql_query        = SELECT               		\
                m.id*100+2, 						\
		m.id AS module_id, 					        \
        m.block_title AS title,           			\
        m.block_title AS name,            			\
        'recblock'    AS type,            			\
		'' AS is_hidden,                  			\
        '' AS deleted_at,             				\
		m.not_for_stb300=0 	AS in_ogo,  			\
		true AS wide_poster_preview_url,      		\
		true AS wide_poster_back_url,				\
		ogo_mode_disabled AS is_ott,                                \
		1 AS is_ogo                                 \
    FROM stb_recommendations_content.modules m  	\
	    WHERE tab_id = 'for_search' 				\
			    OR ( 						        \
				tab_id IN ('Main2', 'NewContent', 'STB300', 'Main_ott') 	\
				AND m.is_hidden = 0 				\
			    ) \
			    AND m.type like '%HandModule'
}

source ab_tv_guides_source : parent_source
{
    sql_query_pre    	= SET NAMES utf8
    sql_query_pre    	= SET CHARACTER SET utf8
    sql_query_pre    	= SET SESSION query_cache_type = OFF
    sql_attr_timestamp 	= xmltv_started_at
    sql_attr_timestamp 	= xmltv_ended_at
    sql_field_string 	= title
    sql_field_string 	= name
    sql_field_string	= title_sub
    sql_attr_string  	= type
    sql_attr_string  	= xmltv_channel_id
    sql_attr_string  	= xmltv_icon_url
    sql_attr_uint    	= is_hidden
    sql_attr_uint    	= deleted_at
    sql_attr_bool       = is_ott

	sql_query        = SELECT          							\
    	g.id*10000+2, 											\
	UNIX_TIMESTAMP(CONVERT_TZ(g.xmltv_started_at, '+00:00', @@global.time_zone))	AS xmltv_started_at,	\
	UNIX_TIMESTAMP(CONVERT_TZ(g.xmltv_ended_at, '+00:00', @@global.time_zone))	AS xmltv_ended_at,			\
        g.title,           										\
        g.title 							AS name, 			\
        g.title_sub, 											\
        'programm' 							AS type, 			\
	g.xmltv_channel_id, 										\
	g.xmltv_icon_url, 											\
	'' AS is_hidden,                  							\
    '' AS deleted_at,        	          						\
    tv_channels.available_for_kuzbass   AS is_ott  \
    FROM stb_index.tv_guides g  								\
    LEFT JOIN stb_index.tv_channels ON tv_channels.xmltv_channel_id = g.xmltv_channel_id  \
    WHERE g.xmltv_started_at > date_sub(now(), INTERVAL 1 DAY) \
    AND g.xmltv_channel_id in (SELECT DISTINCT xmltv_channel_id FROM stb_index.tv_channels where is_xxx = 0)
}

index parent_alphabet
{
    path              = /opt/sphinx/index/dummy_alpha
    min_prefix_len    = 1
    min_word_len      = 1
	dict			  = keywords
    charset_table     = 0..9, A..Z->a..z, a..z,\
                        U+C0->a, U+C1->a, U+C2->a, U+C3->a, U+C4->a, U+C5->a, U+C6->a,\
                        U+C7->c,U+E7->c, U+C8->e, U+C9->e, U+CA->e, U+CB->e, U+CC->i,\
                        U+CD->i, U+CE->i, U+CF->i, U+D0->d, U+D1->n, U+D2->o, U+D3->o,\
                        U+D4->o, U+D5->o, U+D6->o, U+D8->o, U+D9->u, U+DA->u, U+DB->u,\
                        U+DC->u, U+DD->y, U+DE->t, U+DF->s,\
                        U+E0->a, U+E1->a, U+E2->a, U+E3->a, U+E4->a, U+E5->a, U+E6->a,\
                        U+E7->c,U+E7->c, U+E8->e, U+E9->e, U+EA->e, U+EB->e, U+EC->i,\
                        U+ED->i, U+EE->i, U+EF->i, U+F0->d, U+F1->n, U+F2->o, U+F3->o,\
                        U+F4->o, U+F5->o, U+F6->o, U+F8->o, U+F9->u, U+FA->u, U+FB->u,\
                        U+FC->u, U+FD->y, U+FE->t, U+FF->s, U+0400->U+0435, U+0401->U+0435,\
                        U+0402->U+0452, U+0452, U+0403->U+0433, U+0404->U+0454, U+0454,\
                        U+0405->U+0455, U+0455, U+0406->U+0456, U+0407->U+0456, U+0457->U+0456,\
                        U+0456, U+0408..U+040B->U+0458..U+045B, U+0458..U+045B, U+040C->U+043A,\
                        U+0439, U+040D->U+0439, U+040E->U+0443, U+040F->U+045F, U+045F, U+0450->U+0435,\
                        U+0451->U+0435, U+0453->U+0433, U+045C->U+043A, U+045D->U+0439, U+045E->U+0443,\
                        U+0460->U+0461, U+0461, U+0462->U+0463, U+0463, U+0464->U+0465, U+0465,\
                        U+0466->U+0467, U+0467, U+0468->U+0469, U+0469, U+046A->U+046B, U+046B,\
                        U+046C->U+046D, U+046D, U+046E->U+046F, U+046F, U+0470->U+0471, U+0471,\
                        U+0472->U+0473, U+0473, U+0474->U+0475, U+0476->U+0475, U+0477->U+0475,\
                        U+0475, U+0478->U+0479, U+0479, U+047A->U+047B, U+047B, U+047C->U+047D,\
                        U+047D, U+047E->U+047F, U+047F, U+0480->U+0481, U+0481, U+048A->U+0439,\
                        U+048B->U+0439, U+048C->U+044C, U+048D->U+044C, U+048E->U+0440, U+048F->U+0440,\
                        U+0490->U+0433, U+0491->U+0433, U+0490->U+0433, U+0491->U+0433, U+0492->U+0433,\
                        U+0493->U+0433, U+0494->U+0433, U+0495->U+0433, U+0496->U+0436, U+0497->U+0436,\
                        U+0498->U+0437, U+0499->U+0437, U+049A->U+043A, U+049B->U+043A, U+049C->U+043A,\
                        U+049D->U+043A, U+049E->U+043A, U+049F->U+043A, U+04A0->U+043A, U+04A1->U+043A,\
                        U+04A2->U+043D, U+04A3->U+043D, U+04A4->U+043D, U+04A5->U+043D, U+04A6->U+043F,\
                        U+04A7->U+043F, U+04A8->U+04A9, U+04A9, U+04AA->U+0441, U+04AB->U+0441, U+04AC->U+0442,\
                        U+04AD->U+0442, U+04AE->U+0443, U+04AF->U+0443, U+04B0->U+0443, U+04B1->U+0443, U+04B2->U+0445,\
                        U+04B3->U+0445, U+04B4->U+04B5, U+04B5, U+04B6->U+0447, U+04B7->U+0447, U+04B8->U+0447, U+04B9->U+0447,\
                        U+04BA->U+04BB, U+04BB, U+04BC->U+04BD, U+04BE->U+04BD, U+04BF->U+04BD, U+04BD, U+04C0->U+04CF, U+04CF,\
                        U+04C1->U+0436, U+04C2->U+0436, U+04C3->U+043A, U+04C4->U+043A, U+04C5->U+043B, U+04C6->U+043B,\
                        U+04C7->U+043D, U+04C8->U+043D, U+04C9->U+043D, U+04CA->U+043D, U+04CB->U+0447, U+04CC->U+0447,\
                        U+04CD->U+043C, U+04CE->U+043C, U+04D0->U+0430, U+04D1->U+0430, U+04D2->U+0430, U+04D3->U+0430,\
                        U+04D4->U+00E6, U+04D5->U+00E6, U+04D6->U+0435, U+04D7->U+0435, U+04D8->U+04D9, U+04DA->U+04D9,\
                        U+04DB->U+04D9, U+04D9, U+04DC->U+0436, U+04DD->U+0436, U+04DE->U+0437, U+04DF->U+0437,\
                        U+04E0->U+04E1, U+04E1, U+04E2->U+0439, U+04E3->U+0439, U+04E4->U+0439, U+04E5->U+0439,\
                        U+04E6->U+043E, U+04E7->U+043E, U+04E8->U+043E, U+04E9->U+043E, U+04EA->U+043E, U+04EB->U+043E,\
                        U+04EC->U+044D, U+04ED->U+044D, U+04EE->U+0443, U+04EF->U+0443, U+04F0->U+0443, U+04F1->U+0443,\
                        U+04F2->U+0443, U+04F3->U+0443, U+04F4->U+0447, U+04F5->U+0447, U+04F6->U+0433, U+04F7->U+0433,\
                        U+04F8->U+044B, U+04F9->U+044B, U+04FA->U+0433, U+04FB->U+0433, U+04FC->U+0445, U+04FD->U+0445,\
                        U+04FE->U+0445, U+04FF->U+0445, U+0410..U+0418->U+0430..U+0438, U+0419->U+0439, U+0430..U+0438,\
                        U+041A..U+042F->U+043A..U+044F, U+043A..U+044F,
    source            = dummy
}


index ab_actors : parent_alphabet
{
    source	= ab_source_actors
    path	= /opt/sphinx/index/ab_actors
}

index alphabet : parent_alphabet
{
    source	= all_ek
    path	= /opt/sphinx/index/alphabet
}

index ab_recblocks : parent_alphabet
{
    source	= ab_recblocks
    path	= /opt/sphinx/index/ab_recblocks
}

index ab_tv_channels : parent_alphabet
{
    source	= tv_channels
    path	= /opt/sphinx/index/ab_tv_channels
}

index ab_tv_guides : parent_alphabet
{
    source	= ab_tv_guides_source
    path	= /opt/sphinx/index/ab_tv_guides
}

indexer
{
    mem_limit    = 1024M
    write_buffer = 8M
}
searchd
{
    listen          = 9313
    listen          = 9306:mysql41
    log             = /var/log/sphinx/searchd.log
    read_timeout    = 5
    max_children    = 128
    pid_file        = /var/run/searchd.pid
    seamless_rotate = 1
    preopen_indexes = 1
    unlink_old      = 1
    dist_threads    = 2
    workers         = threads
    binlog_path     = /opt/sphinx/index/
    max_batch_queries = 128
}
